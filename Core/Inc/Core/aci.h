/*======================================================================
Имя файла:         	aci.h
Автор:             	Digital Control Systems Group (Texas Instruments)
						  	
Версия файла:      	01.02
Дата изменения:		23/11/10
Применяемость:     	Совместно с библиотекой IQmath
Описание:
Библиотека расчета модели AC двигателя
======================================================================*/

#ifndef ACI_
#define ACI_

#include "std.h"

#ifdef __cplusplus
extern "C" {
#endif

#define   _IQsinPU(A)         sin((A)*6.283185307)
#define   _IQcosPU(A)         cos((A)*6.283185307)
#define   _IQmpy(A,B)         ((A) * (B))
#define   _IQabs(A)           fabs(A)
#define   _IQdiv(A,B)         ((float)(A) / (float)(B))

#define   _IQatan2PU(A,B)     ((atan2(A,B)*(1.0/6.283185307)) >= 0.0 ? (atan2(A,B)*(1.0/6.283185307)):1.0 + (atan2(A,B)*(1.0/6.283185307)))
typedef struct {
	Float rs;				// Сопротивление статора Q24 (Ом)
	Float rr;				// Сопротивление ротора Q24 (Ом)
	Float ls;				// Индуктивность статора Q24 (Гн)
	Float lr;				// Индуктивность ротора Q24 (Гн)
	Float lm;				// Взаимоиндуктивность Q24 (Гн)
	Float zp;				// Количество полюсов Q24
	Float b;					// Коэффициент демпфирования Q24 (Нм*сек/рад)
	Float j;					// Момент инерции ротора Q24 (кг*м^2)
	Float cosf;				// Косинус фи Q24
} TAdParams;

typedef struct {
	Float ub;				// Базовое напряжение Q21 (В)
	Float ib;				// Базовый ток Q21 (А)
	Float fb;				// Базовая электрическая частота Q21 (Гц)
	Float wb;				// Базовая частота вращения Q21 (рад/с)
	Float ts;				// Период дискретизации Q24 (сек)
	Float tb;				// Базовый момент Q21 (Нм)
	Float lb;				// Базовое потокосцепление Q21 (В*сек/рад)
} TBaseParams;

extern TAdParams   aci_ad;
extern TBaseParams aci_base;
/*
//--------------------------------------------------------------------------------------------
typedef struct {
	Float ide;				// Вход:       Ток по оси D в синхр.-вращ. системе координат (о.е.)
	Float iqe;				// Вход:       Ток по оси Q в синхр.-вращ. системе координат (о.е.)
	Float wr;				// Вход:       Электрическая угловая скорость вращения ротора (о.е.)
	Float we;				// Выход:      Синхронная угловая скорость вращения ротора (о.е.)
	Float theta;			// Выход:      Угол потока ротора (о.е.)
	Float rrc;				// Параметр:   Горячая коррекция сопротивления ротора
	Float ime;				// Переменная: Ток намагн. по оси D в синхр.-вращ. системе координат (о.е.)
	Float w_slip;			// Переменная: Скольжение (о.е.)
	Float Jump;				// Переменная: Флаг перехода
	Float Flag;				// Переменная: Флаг разгона / торможения
	Float Ti_sat;			// Параметр:   Постоянная увеличения ограничения
	Float Ti_sat_stop;	// Параметр:   Постоянная увеличения ограничения при торможении
	Float We_sat;			// Параметр: 	Номинальное скольжение
	Float Spd_ref;			// Переменная: Заданная скорость
	Float dt;				// Параметр: 	Период дискретизации
	Float K[4];				// Параметр:   Константы расчета модели
} CURMOD;

__INLINE void cur_mod_reset(CURMOD *v)
{
	v->ime    = 0;
	v->w_slip = 0;
	v->theta  = 0;
	v->We_sat = 0;
	v->we     = 0;
	v->Jump   = 0;
	v->Flag   = 0;
}

void cur_mod_init(CURMOD *);
void cur_mod_calc(CURMOD *);
void cur_mod2_calc(CURMOD *);
*/
//--------------------------------------------------------------------------------------------
typedef struct {
	Float UDsS;				// Вход:       Напряжение оси D
	Float UQsS;				// Вход:       Напряжение оси Q
	Float IDsS;				// Вход:       Ток оси D
	Float IQsS;				// Вход:       Ток оси Q
	Float ThetaFlux;		// Выход:      Угол потока ротора
	Float PsiDrS;			// Выход:      Восст. поток ротора оси D
	Float PsiQrS;			// Выход:      Восст. поток ротора оси Q
	Float CurrDrE;			// Выход:      Ток ротора оси D вращающейся системы координат (токовая модель)
	Float FluxDrE;			// Переменная: Поток ротора оси D вращающейся системы координат (токовая модель)
	Float FluxDrS;			// Переменная: Поток ротора оси D (токовая модель)
	Float FluxQrS;			// Переменная: Поток ротора оси Q (токовая модель)
	Float FluxDsS;			// Переменная: Поток статора оси D (токовая модель)
	Float FluxQsS;			// Переменная: Поток статора оси Q (токовая модель)
	Float PsiDsS;			// Переменная: Поток статора оси D (модель напряжений)
	Float PsiQsS;			// Переменная: Поток статора оси Q (модель напряжений)
	Float UiDsS;			// Переменная: Компенсация напряжения по оси D
	Float UiQsS;			// Переменная: Компенсация напряжения по оси Q
	Float EmfDsS;			// Переменная: ЭДС вращения по оси D
	Float EmfQsS;			// Переменная: ЭДС вращения по оси Q
	Float Te_est;			// Переменная: Оценка момента
	Float ZeroLoadEst;		// Параметр:   Зона нечувствительности определения момента нагрузки
	Float Kp;				// Параметр:   Пропорциональный коэффициент
	Float Ki;				// Параметр:   Интегральный коэффициент
	Float Kir;				// Параметр:   Коэффициент расчета тока ротора
	Float K[11];			// Параметр:   Константы расчета
} ACIFE;

__INLINE void aci_fe_reset(ACIFE *v)
{
	v->FluxDrE = 0;
	v->UiDsS = 0;
	v->UiQsS = 0;
	v->PsiDsS = 0;
	v->PsiQsS = 0;
	v->ThetaFlux = 0;
}

void aci_fe_init(ACIFE *);
void aci_fe_calc(ACIFE *);

//--------------------------------------------------------------------------------------------
/*
typedef struct {
	Float IDsS;				// Вход:       Ток оси D
	Float IQsS;				// Вход:       Ток оси Q 
	Float ThetaFlux;		// Вход:      	Угол потока ротора     		  
	Float PsiDrS;			// Вход:       Восст. поток ротора оси D  
	Float PsiQrS;			// Вход:       Восст. поток ротора оси Q 		
	Float WrHat;			// Выход:      Восст. скорость (о.е.)
	Float SquaredPsi;		// Переменная: Квадратичный поток ротора
	Float OldThetaFlux;	// Переменная: Предыдущий угол потока ротора
	Float WPsi;				// Переменная: Синхронная скорость потока ротора
	Float fc;				// Параметр:   Частота среза низкочастотного фильтра
	Float K[4];				// Параметр:   Константы расчета
} ACISE;

__INLINE void aci_se_reset(ACISE *v)
{
	v->WPsi = 0;
	v->WrHat = 0;
}

void aci_se_init(ACISE *);
void aci_se_calc(ACISE *);
*/
#ifdef __cplusplus
}
#endif // extern "C"

#endif
